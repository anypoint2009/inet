//
// Copyright (C) 2013 OpenSim Ltd.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, see <http://www.gnu.org/licenses/>.
//
// author: Zoltan Bojthe
//


#include "INETDefs.h"

static void assertInitStageConstants();
static void printInitStageConstants();

EXECUTE_ON_STARTUP(assertInitStageConstants(); printInitStageConstants(););

static void assertInitStageConstants()
{
        ASSERT(STAGE_DO_LOCAL >= 0);

        ASSERT(STAGE_DO_PUBLISH_RADIOSTATE >= STAGE_NODESTATUS_AVAILABLE);
        ASSERT(STAGE_DO_PUBLISH_RADIOSTATE >= STAGE_NOTIFICATIONBOARD_AVAILABLE);

        ASSERT(STAGE_IP_ADDRESS_AVAILABLE > STAGE_DO_CONFIGURE_IP_ADDRESSES);
        ASSERT(STAGE_IP_ADDRESS_AVAILABLE >= STAGE_INTERFACEENTRY_REGISTERED);

        ASSERT(STAGE_DO_COMPUTE_IP_AUTOCONFIGURATION >= STAGE_INTERFACEENTRY_REGISTERED);

        ASSERT(STAGE_DO_ADD_IP_PROTOCOLDATA_TO_INTERFACEENTRY >= STAGE_INTERFACEENTRY_REGISTERED);

        ASSERT(STAGE_DO_CONFIGURE_IP_ADDRESSES > STAGE_DO_COMPUTE_IP_AUTOCONFIGURATION);


        ASSERT(STAGE_DO_SET_INTERFACEENTRY_RTR_ADV_INTERVAL >= STAGE_INTERFACEENTRY_IP_PROTOCOLDATA_AVAILABLE);
        ASSERT(STAGE_DO_SET_INTERFACEENTRY_RTR_ADV_INTERVAL >= STAGE_INTERFACEENTRY_REGISTERED);

        ASSERT(STAGE_DO_ADD_STATIC_ROUTES > STAGE_DO_CONFIGURE_IP_ADDRESSES);

        ASSERT(STAGE_DO_ASSIGN_ROUTERID > STAGE_DO_CONFIGURE_IP_ADDRESSES);

        ASSERT(STAGE_DO_INIT_ROUTING_PROTOCOLS >= STAGE_INTERFACEENTRY_REGISTERED);
        ASSERT(STAGE_DO_INIT_ROUTING_PROTOCOLS >= STAGE_DO_REGISTER_TRANSPORTPROTOCOLID_IN_IP);

        ASSERT(STAGE_DO_INITIALIZE_AND_PUBLISH_LOCATION > STAGE_DO_LOCAL);
        ASSERT(STAGE_DO_REGISTER_RADIO > STAGE_DO_INITIALIZE_AND_PUBLISH_LOCATION);

        ASSERT(STAGE_ROUTINGTABLE_COMPLETED > STAGE_DO_INIT_ROUTING_PROTOCOLS);

        ASSERT(STAGE_DO_CONFIGURE_IP_ADDRESSES > STAGE_DO_COMPUTE_IP_AUTOCONFIGURATION);
        ASSERT(STAGE_DO_INITIALIZE_AND_PUBLISH_LOCATION > STAGE_DO_ASSIGN_MOBILITY_COORDINATOR);

        ASSERT(STAGE_TRANSPORT_LAYER_AVAILABLE > STAGE_DO_REGISTER_TRANSPORTPROTOCOLID_IN_IP);
}

void printInitStageConstants()
{
#define P(NAME)   printf("%s\t%d\n", #NAME, NAME)
    P(STAGE_DO_LOCAL);
    P(STAGE_CHANNEL_AVAILABLE);

    printf("\n");
    P(STAGE_NODESTATUS_AVAILABLE);
    P(STAGE_IP_LAYER_READY_FOR_HOOK_REGISTRATION);
    P(STAGE_IP_LAYER_READY_FOR_PROTOCOL_REGISTRATION);
    P(STAGE_NOTIFICATIONBOARD_AVAILABLE);
    P(STAGE_DO_ASSIGN_MOBILITY_COORDINATOR);
    P(STAGE_ANNOTATIONMANAGER_AVAILABLE);
    P(STAGE_BATTERY_READY_FOR_DEVICE_REGISTRATION);
    P(STAGE_CHANNELCONTROL_AVAILABLE);
    P(STAGE_DO_IPV6ROUTINGTABLE_XMIPV6_SETTINGS);
    P(STAGE_DO_TRACI_LAUNCH);
    P(STAGE_INTERFACETABLE_READY_FOR_INTERFACE_REGISTRATION);
    P(STAGE_DO_REGISTER_INTERFACE);
    P(STAGE_DO_REGISTER_TRANSPORTPROTOCOLID_IN_IP);
    P(STAGE_DO_GENERATE_MACADDRESS);
    P(STAGE_CHANNELCONTROL_NUMCHANNELS_AVAILABLE);
    P(STAGE_IPASSIVEQUEUE_AVAILABLE);
    P(STAGE_DO_SUBSCRIBE_TO_RADIOSTATE_NOTIFICATIONS);

    printf("\n");
    P(STAGE_TRANSPORTPROTOCOLID_REGISTERED_IN_IP);
    P(STAGE_RADIOSTATE_SUBSCRIPTIONS_DONE);
    P(STAGE_DO_PUBLISH_RADIOSTATE);
    P(STAGE_MACADDRESS_AVAILABLE);
    P(STAGE_DO_ADD_IP_PROTOCOLDATA_TO_INTERFACEENTRY);
    P(STAGE_INTERFACEENTRY_REGISTERED);
    P(STAGE_MOBILITY_COORDINATOR_ASSIGNED);
    P(STAGE_DO_INITIALIZE_AND_PUBLISH_LOCATION);
    P(STAGE_DO_COMPUTE_IP_AUTOCONFIGURATION);
    P(STAGE_TRANSPORT_LAYER_AVAILABLE);

    printf("\n");
    P(STAGE_LOCATION_AVAILABLE);
    P(STAGE_DO_REGISTER_RADIO);
    P(STAGE_DO_CONFIGURE_IP_ADDRESSES);
    P(STAGE_INTERFACEENTRY_IP_PROTOCOLDATA_AVAILABLE);

    printf("\n");
    P(STAGE_DO_ADD_STATIC_ROUTES);
    P(STAGE_DO_SET_INTERFACEENTRY_RTR_ADV_INTERVAL);
    P(STAGE_IP_ADDRESS_AVAILABLE);
    P(STAGE_DO_ASSIGN_ROUTERID);

    printf("\n");
    P(STAGE_ROUTERID_AVAILABLE);
    P(STAGE_DO_INIT_ROUTING_PROTOCOLS);

    printf("\n");
    P(STAGE_ROUTINGTABLE_COMPLETED);

    printf("\n");
    P(STAGE_ROUTING_PROTOCOLS_INITIALIZED);
    P(STAGE_DO_INIT_APPLICATION);
}
